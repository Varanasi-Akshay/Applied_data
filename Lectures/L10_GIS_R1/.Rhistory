q()
library(sp)
library(rgdal)
dir()
setwd('/Users/jdr2823/Box Sync/Teaching/Spring2018/Data_class/Lectures/L16_GIS_R1')
dir()
library(sp)
library(rgdal)
county = readOGR('.', 'US_COUNTY_SHPFILE')
county = readOGR('.', '~\US_COUNTY_SHPFILE')
?readOGR
county = readOGR('US_COUNTY_SHPFILE', 'US_county_cont')
head(county)
county
plot(county)
dir()
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
head(m1)
ptsSPDF = SpatialPointsDataFrame(
m1[ , cbind(Longitude, Latitude)],
# I always use this CRS for Google-derived lat/lon
data = pts, proj4string = CRS('+init=epsg:4326'),
match.ID = FALSE
)
ptsSPDF = SpatialPointsDataFrame(
m1[ , cbind(Longitude, Latitude)],
# I always use this CRS for Google-derived lat/lon
data = m1, proj4string = CRS('+init=epsg:4326'),
match.ID = FALSE
)
points(mapproject(list(y=pp$lat, x=pp$long)), col = 'black', pch = 19, cex = 1)
library(mapproj)
points(mapproject(list(y=pp$lat, x=pp$long)), col = 'black', pch = 19, cex = 1)
points(mapproject(list(y=m1$Latitude, x=m1$Longitude)), col = 'red', pch = 19, cex = 1)
county_conic <- spTransform(county, CRS("+init=epsg:26978"))
plot(county_conic)
points(mapproject(list(y=m1$Latitude, x=m1$Longitude)), col = 'red', pch = 19, cex = 1)
points(mapproject(list(y=m1$Latitude[1], x=m1$Longitude[1])), col = 'red', pch = 19, cex = 1)
points(mapproject(list(y=m1$Latitude[2], x=m1$Longitude[2])), col = 'blue', pch = 19, cex = 1)
county_conic <- spTransform(county, CRS("polyconic"))
plot(county_conic)
county_conic <- spTransform(county, CRS("+polyconic"))
plot(county_conic)
install.packages(c("sf", "tidyverse", "devtools"))
devtools::install_github("tidyverse/ggplot2")
library(sf)
(pt = st_point(c(2,4)))
pt = st_point(c(2,4))
(pt_bin = st_as_binary(pt))
st_dimension(pt)
str(pt)
st_crs("+proj=longlat +datum=WGS84")
st_crs(3857)
st_crs(3857)$units
fname = system.file("shape/nc.shp", package = "sf")
fname
nc = read_sf(fname)
nc
plot(nc)
?st_point
dir()
ls()
head(m1)
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
head(m1)
class(m1)
coordinates(Mydata) <- ~Longitude + Latitude
coordinates(m1) <- ~Longitude + Latitude
class(m1)
head(m1)
require(raster)
projection(m1) = "+init=espg:4326" # WGS84 coords
projection(m1) = "+init=epsg:26978" # WGS84 coords
shapefile(Mydata, "Mydata.shp")
shapefile(m1, "m1.shp")
head(m1)
m1
## read in county shapefile data
county <- shapefile('US_COUNTY_SHPFILE/US_county_cont.shp')
plot(county)
## transform that data to a more conocial view
county <- spTransform(county, CRS("+init=epsg:26978"))
plot(county)
dev.off()
plot(county)
points(m1)
plot(m1, add = T)
dev.off()
plot(m1)
pp_points <- spTransform(m1, CRS("+init=epsg:26978"))
plot(pp_points)
points(pp_points)
plot(county)
points(pp_points)
?spTransform
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
## convert the
coordinates(m1) <- ~Longitude + Latitude
projection(m1) = "+init=epsg:26978"
shapefile(m1, "power_plant_shapefile.shp")
pp <- shapefile('power_plant_shapefile.shp')
pp <- spTransform(pp, CRS("+init=epsg:26978"))
plot(pp)
plot(county)
points(mapproject(pp$lon, pp$lat), col="red")
library(map)
library(maps)
map('county')
head(m1)
plot(m1, add = T)
?map
## read in shapefile of CO2 pipelines
co2 <- shapefile('CO2_pipeline_shapefile/CO2_shpfile.shp')
## transform that data to a more conocial view
co2 <- spTransform(co2, CRS("+init=epsg:26978"))
plot(county)
plot(co2, add = T)
plot(co2, add = T, col = 'red', lwd = 3)
dir()
pp <- shapefile('power_plant_shapefile.shp')
pp <- spTransform(pp, CRS("+init=epsg:26978"))
plot(pp, add = T, col = 'green')
co2 <- shapefile('CO2_pipeline_shapefile/CO2_shpfile.shp')
plot(co2, add = T, col = 'blue')
dev.off()
county <- shapefile('US_COUNTY_SHPFILE/US_county_cont.shp')
co2 <- shapefile('CO2_pipeline_shapefile/CO2_shpfile.shp')
plot(county)
plot(co2, add = T, col = 'red', lwd = 3)
pp
co2
plot(pp)
plot(county, add = T)
county
county <- spTransform(county, CRS("+init=epsg:26978"))
plot(county)
plot(spTransform(pp, CRS("+init=epsg:26978")), add = T, col = 'green')
county
pp
co2 <- spTransform(co2, CRS("+init=epsg:26978"))
co2
head(county)
head(pp)
head(co2)
dim(pp)
pp$OBJECTID <- 1:9093
head(pp)
plot(pp, add = T, col = 'red')
map('world')
plot(pp, add = T)
summary(county)
summary(pp)
summary(co2)
co2 <- shapefile('CO2_pipeline_shapefile/CO2_shpfile.shp')
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
head(m1)
pts_m1 = SpatialPoints(cbind(m1$Longitude,m1$Latitude), CRS("+init=epsg:4202"))
pts_m1v2 <- spTransform(pts_m1, CRS("+init=epsg:26978"))
plot(county)
head(pts_m1v2)
plot(pts_m1v2, add = T, col = 'red')
pts_m1v2
pp
co2
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
## convert the
m1 = SpatialPoints(cbind(m1$Longitude,m1$Latitude), CRS("+init=epsg:26978"))
plot(county)
plot(m1, add = T, col = 'red')
m1 <- spTransform(m1, CRS("+init=epsg:26978"))
plot(m1, add = T, col = 'red')
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
m1 = SpatialPoints(cbind(m1$Longitude,m1$Latitude), CRS("+init=epsg:4202"))
m1 <- spTransform(m1, CRS("+init=epsg:26978"))
plot(m1, add = T, col = 'red')
m1
shapefile(m1, "power_plant_shapefile.shp")
pp2 <- shapefile('power_plant_shapefile.shp')
plot(pp2, add = T, col = 'blue')
tx <- county[county$STATE_NAME == 'Texas',]
plot(tx)
plot(pp2, add = T, col = 'blue')
co2 <- shapefile('CO2_pipeline_shapefile/CO2_shpfile.shp')
## transform that data to a more conocial view
co2 <- spTransform(co2, CRS("+init=epsg:26978"))
plot(co2, add = T, col = 'red', lwd = 3)
tx_pp <- over(pp2 , tx , fn = NULL)
?over
CRS.new<-CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0+datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")  #EPSG:102003
proj4string(tx) <- CRS.new
proj4string(pp2) <- CRS.new
tx_pp <- over(pp2 , tx , fn = NULL)
head(tx_pp)
tx_pp
tx_pp <- over(tx , pp2 , fn = NULL)
tx_pp
pp2
head(pp2)
summary(pp2)
head(pp2@data)
head(m1)
m1
summary(m1)
head(m1$data)
head(m1@data)
head(tx)
?SpatialPoints
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
## convert the points to the same projection as the couty and
m1 = SpatialPointsDataFrame(cbind(m1$Longitude,m1$Latitude), CRS("+init=epsg:4202")) # for some reason you have to convert it to a couple to get it to work...
m1 <- spTransform(m1, CRS("+init=epsg:26978"))
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
m1 = SpatialPointsDataFrame(cbind(m1$Longitude,m1$Latitude), data = m1, proj4string = CRS("+init=epsg:4202"))
m1 <- spTransform(m1, CRS("+init=epsg:26978"))
shapefile(m1, "power_plant_shapefile.shp")
pp2 <- shapefile('power_plant_shapefile.shp')
m1 <- spTransform(m1, CRS("+init=epsg:26978"))
shapefile(m1, "power_plant_shapefile.shp")
pp2 <- shapefile('power_plant_shapefile.shp')
plot(tx)
plot(pp2)
plot(tx)
plot(pp2, add = T, col = 'blue')
head(pp2)
tx_pp <- over(tx , pp2 , fn = NULL)
CRS.new<-CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0+datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0")  #EPSG:102003
proj4string(tx) <- CRS.new
proj4string(pp2) <- CRS.new
plot(pp2, add = T, col = 'red')
tx_pp <- over(tx , pp2 , fn = NULL)
head(tx_pp)
tx_pp2 <- tx_pp[complete.cases(tx_pp)]
tx_pp2 <- tx_pp[complete.cases(tx_pp),]
plot(tx)
plot(tx)
plot(tx_pp2, add = T, col = 'green')
dev.off()
plot(tx)
plot(tx_pp2, add = T, col = 'green')
warnings()
head(tx_pp2)
tx_pp2
summary(tx_pp2)
pp2
tx_pp
tx_pp <- over(tx , pp2 , fn = NULL)
tx_pp <- tx_pp[complete.cases(tx_pp),]
head(tx_pp)
head(eia)
dev.off()
tx_pp_sf = SpatialPointsDataFrame(cbind(tx_pp$Lngtd,tx_pp$Lattd), data = tx_pp, proj4string = CRS("+init=epsg:4202")) # for some reason you have to convert it to a couple to get it to work...
tx_pp_sf <- spTransform(tx_pp_sf, CRS("+init=epsg:26978"))
shapefile(tx_pp_sf, "TX_power_plant_shapefile.shp")
tx_pp <- shapefile('TX_power_plant_shapefile.shp')
plot(tx_pp, add = T, col = 'blue')
plot(tx)
plot(tx_pp, add = T, col = 'red')
co2
tx
proj4string(tx) <- CRS.new
proj4string(co2) <- CRS.new
tx_co2 <- over(tx , co2 , fn = NULL)
tx_co2
tx_co2 <- tx_co2[complete.cases(tx_co2),]
head(tx_co2)
summary(tx_co2)
?sp::over
?SpatialLinesDataFrame
x <- crop(co2, tx)
?st_intersection
?gIntersection
tx_co2 <- gIntersection(tx, co2)
library(rgeos)
tx_co2 <- gIntersection(tx, co2)
tx_co2
co2
head(c02)
head(co2)
head(tx_co2)
head(tx_co2@data)
tx_co2 <- gIntersection(tx, co2, drop_lower_td = TRUE)
head(tx_co2)
tx_co2 <- raster::intersect(tx, co2)
head(tx_co2)
tx_co2
plot(tx)
plot(tx_co2, add = T, col = 'orange', lwd = 3)
co2_pipelines_in_tx <- raster::intersect(co2, tx)
plot(co2_pipelines_in_tx, add = T, col = 'red', lwd = 3)
pp_in_tx <- raster::intersect(pp2, tx)
plot(pp_in_tx, add = T, col = 'blue')
q()
## all the libraries
library(sp)
library(rgdal)
library(raster)
library(colorRamps)
install.packages("colorRamps")
## all the libraries
library(sp)
library(rgdal)
library(raster)
library(colorRamps)
library(rasterVis)
install.packages("rasterVis")
install.packages("rgeos")
## all the libraries
library(sp)
library(rgdal)
library(raster)
library(colorRamps)
library(rasterVis)
library(rgeos)
## read in county shapefile data
county <- shapefile('US_COUNTY_SHPFILE/US_county_cont.shp')
county
head(county)
## draw the plot of US counties
plot(county)
## simple R-type subset of the polygon can give you only Texas
tx <- county[county$STATE_NAME == 'Texas',]
head(tx)
## plot just Texas
plot(tx)
## plot Texas between certain lat/long cordinates using R syntax
plot(tx, ylim = c(31, 34), xlim = c(-106, -98))
box() ## put a box on it! works on most all plots, puts a box around the "plot area" just inside the margins: mar = c(...)
## plot just Travis county, TX
plot(county[county$NAME == 'Travis',])
## Plot Travis and Williamson counties
plot(county[county$NAME %in% c('Travis', 'Williamson'),])
## Plot Travis and Williamson counties in Texas only
plot(county[county$NAME %in% c('Travis', 'Williamson') & county$STATE_NAME == 'Texas',])
## transform that data to a more conocial view
county <- spTransform(county, CRS("+init=epsg:26978"))
plot(county)
## read in shapefile of CO2 pipelines
co2 <- shapefile('CO2_pipeline_shapefile/CO2_shpfile.shp')
co2
head(co2)
print(crs(county))
print(crs(co2))
## transform that data to a more conocial view
#co2 <- spTransform(co2, CRS("+init=epsg:26978"))
plot(county)
plot(co2, add = T, col = 'red', lwd = 3)
## simple subset of the polygon using R syntax
tx <- county[county$STATE_NAME == 'Texas',]
plot(tx)
## read in shapefile of CO2 pipelines
co2 <- shapefile('CO2_pipeline_shapefile/CO2_shpfile.shp')
## transform that data to a more conocial view
co2 <- spTransform(co2, CRS("+init=epsg:26978"))
plot(tx)
plot(co2, add = T, col = 'red', lwd = 3)
########################## plotting points (power plant) data from x-y coordinates (lat-long) ##########################
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data.csv')
ll <- read.csv('EIA_F860M_LL.csv')
m1 <- merge(x = eia, y = ll, by.x = 'Plant.Code', by.y = 'Plant.ID')
head(m1) # just a regular dataframe, for now...
## convert the points to the same projection as the county and make a shapefile of the points
m2 = SpatialPointsDataFrame(cbind(m1$Longitude,m1$Latitude), data = m1, proj4string = CRS("+init=epsg:4202")) # for some reason you have to convert it to a couple to get it to work...
m2 <- spTransform(m2, CRS("+init=epsg:26978"))
m2
head(m2)
## write a shapefile of what you just made
shapefile(m2, "power_plant_shapefile.shp", overwrite = T)
## use the same command to read in that shapefile
pp2 <- shapefile('power_plant_shapefile.shp')
head(pp2)
plot(tx)
plot(pp2, add = T, col = 'blue')
############################################## intersections ##############################################
## get the polygons (counties in Texas) that intersect (touch) the CO2 pipelines
tx_counties_with_co2_pipelines <- raster::intersect(tx, co2)
## get the CO2 pipeline segments that are inside Texas counties (polygons in tx)
co2_pipelines_in_tx <- raster::intersect(co2, tx)
## get the power plants (points) that are inside Texas (inside polygons in tx)
pp_in_tx <- raster::intersect(pp2, tx)
#tx_counties_with_co2_pipelines <- spTransform(tx_counties_with_co2_pipelines, crs(tx))
#co2_pipelines_in_tx <- spTransform(co2_pipelines_in_tx, crs(tx))
#pp_in_tx <- spTransform(pp_in_tx, crs(tx))
plot(tx)
## plot the couties with CO2 pipelines in orange, the CO2 pipelines in red, the power plants inside Texas in blue
plot(tx_counties_with_co2_pipelines, add = T, col = 'orange', lwd = 2)
plot(co2_pipelines_in_tx, add = T, col = 'red', lwd = 3)
plot(pp_in_tx, add = T, col = 'blue')
## get names from data.frame just like in regular R
head(pp_in_tx)
unique(pp_in_tx$Tchnl)
## subset the Texas power plants to just the NGCC plants
ngcc_tx <- pp_in_tx[pp_in_tx$Tchnl == 'Natural Gas Fired Combined Cycle',]
############## plot stuff from above chunk ######################
plot(tx)
## plot the couties with CO2 pipelines in orange, the CO2 pipelines in red, the power plants inside Texas in blue
plot(tx_counties_with_co2_pipelines, add = T, col = 'orange', lwd = 2)
plot(co2_pipelines_in_tx, add = T, col = 'red', lwd = 3)
plot(pp_in_tx, add = T, col = 'blue')
#################################################################
plot(ngcc_tx, add = T, col = 'green', pch = 20)
## add a title
mtext(side = 3, text = 'All the things in Texas', cex = 3)
## save a shapefile of the NGCC power plants in Texas
shapefile(ngcc_tx, 'ngcc_powerplants_tx.shp', overwrite = T)
CRS.new<-CRS("+proj=lcc +lat_1=27.41666666666667 +lat_2=34.91666666666666 +lat_0=31.16666666666667 +lon_0=-100 +x_0=1000000 +y_0=1000000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
proj4string(ngcc_tx) <- CRS.new
proj4string(co2_pipelines_in_tx) <- CRS.new
## calcualte the distace from each point (power plant) to the nearest line (CO2 pipeline) that are within 10 km
dist <- gDistance(ngcc_tx, co2_pipelines_in_tx, byid=TRUE)
## get the minimum distance from each ngcc power plant to the nearest CO2 pipeline
d_min <- apply(dist,2,min)
## get the power plants that are within 10km of a CO2 pipeline
d2 <- d_min[d_min < 10000]
## subset the powerplants shapefile to those that are within 10km of the CO2 pieplines
ngcc2 <- ngcc_tx[row.names(ngcc_tx) %in% names(d2),]
## plot the close power plants
plot(ngcc2, add = T, col = 'purple', pch = 16)
## how much NGCC capacity is within 10km of a CO2 pipeline
sum(ngcc2$Nmp_C)
plot(ngcc2, add = T, col = 'purple', pch = 16)
