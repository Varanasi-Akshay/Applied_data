setwd("~/Desktop/Adv_Vis/Assignments/VARANASI_AKSHAY_HWK3")
library(lpSolveAPI)
#Read the datasets
eia=read.csv('RHODES_JOSHUA_EIA_2016_data_OPTHW.csv')
fuel_prop=read.csv('fuel_properties.csv')
# Selecting the subset
eia_sub=data.frame(eia)
# Capacity greater than 50
eia_sub=eia_sub[eia_sub$Nameplate.Capacity>50,]
# heat rate greater than 0 and less than 20000
eia_sub=eia_sub[eia_sub$heat_rate>0&eia_sub$heat_rate<20000,]
# Removing the NAs
eia_sub=na.omit(eia_sub)
View(eia_sub)
library(parallel)
library(foreach)
library(doMC) ## for Mac/Linux
install.packages(c("foreach", "doMC"))
library(parallel)
library(foreach)
library(doMC) ## for Mac/Linux
log(3)
log(1:10)
hundred_million_nums = sample(1:10, size=100000000, replace=TRUE)
log_novec = function(n){
ret = rep(NA, length(n))
for(i in seq_along(n)){
ret[i] = log(n[i])
}
return(ret)
}
system.time(log_novec(hundred_million_nums))
system.time(log(hundred_million_nums))
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
# mean of the rows
apply(m, 1, mean)
# mean of the columns
apply(m, 2, mean)
# divide all values by 2
apply(m, 1:2, function(x) x/2)
eia <- read.csv('RHODES_JOSHUA_EIA_2016_data_OPTHW.csv')
# get the mean of the Nameplate capacity, operating year, and capacity factor, by Technology
b1 <- by(data = eia[c('Nameplate.Capacity', 'Operating.Year.avg', 'cap_fac')], INDICES = eia$Technology, FUN = colMeans)
b1
b1$Nuclear
detectCores()
registerDoMC(cores=4) ## use 4 cores at a time
system.time( foreach (i = 1:100000) %do% mean(rnorm(100)) )
system.time( foreach (i = 1:100000) %dopar% mean(rnorm(100)) )
system.time( for(i in 1:100000) mean(rnorm(100)) )
## toy example of how the system works
system.time( for(i in 1:5) {Sys.sleep(5)} )
system.time( foreach(i = 1:5) %dopar% {Sys.sleep(5)} )
## doing HWK2 in half the time
source('RHODES_JOSHUA_HWK2_EIA.R')
system.time( for(i in 2007:2016){RHODES_JOSHUA_HWK2_EIA(i)} )
system.time( foreach(i = 2007:2016) %dopar% {RHODES_JOSHUA_HWK2_EIA(i)} )
setwd("~/Desktop/Adv_Vis/Lectures/L18_send_to_class")
## doing HWK2 in half the time
source('RHODES_JOSHUA_HWK2_EIA.R')
system.time( for(i in 2007:2016){RHODES_JOSHUA_HWK2_EIA(i)} )
system.time( foreach(i = 2007:2016) %dopar% {RHODES_JOSHUA_HWK2_EIA(i)} )
system.time( for(i in 1:10){  ginv(matrix(rnorm(n = 1000^2), nrow = 1000, ncol = 1000)) } )
system.time( foreach(i = 1:10) %dopar% {  ginv(matrix(rnorm(n = 1000^2), nrow = 1000, ncol = 1000)) } )
## load 'em up
library(MASS)
library(dplyr)
library(parallel)
library(foreach)
library(doMC) ## for Mac/Linux
#library(doSNOW) ## for Windows
## set seed to get constant random numbers
set.seed(27)
## let's make some distributions of fuel prices to use
## all these are modeled as independant, but if they depended on each other, you'd want to make them functions of each other, etc.
## we will assume that gas and coal prices have normal distributions
ng_price <- rnorm(1:10000, mean = 3, sd = 0.75)
ng_price <- ng_price[ng_price > 0.5]
sub_price <- rnorm(1:10000, mean = 1.5, sd = 0.25)
sub_price <- sub_price[sub_price > 0.5]
lig_price <- rnorm(1:10000, mean = 2.35, sd = 0.50)
lig_price <- lig_price[lig_price > 0.5]
nuke_price <- rnorm(1:10000, mean = 1.25, sd = 0.15)
nuke_price <- nuke_price[nuke_price > 0.5]
## see the distributions
hist(ng_price, n = 100)
hist(sub_price, n = 100)
hist(lig_price, n = 100)
hist(nuke_price, n = 100)
## run HWK4's opt model using a distribution of prices
## source the optimization function you are working on for homework 4
source('RHODES_HW4_reduc.R')
